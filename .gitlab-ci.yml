stages:
  - test
  - build
  - deploy

.dev:
  only:
    refs:
      - dev
      - /^ci-cd/
  variables:
    IMAGE_TAG: "dev"
    STACK_NAME: "kupaliska_starz_be_dev"
    DEPLOY_PATH: "/data/dev/kupaliska-starz"

.stage:
  only:
    refs:
      - stage
  variables:
    IMAGE_TAG: "stage"
    STACK_NAME: "kupaliska_starz_be_stage"
    DEPLOY_PATH: "/home/gitlab-runner/deployments/kupaliska/stage"

.prod:
  only:
    refs:
      - master
  variables:
    IMAGE_TAG: "latest"
    STACK_NAME: "kupaliska_starz_be"
    DEPLOY_PATH: "/home/gitlab-runner/deployments/kupaliska/prod"

test:
  stage: test
  needs: [ ]
  only:
    refs:
      - merge_requests
      - dev
      - stage
      - master
      - /^ci-cd/
  image: node:14-alpine
  services:
    - postgres:13-alpine
  variables:
    POSTGRES_USER: "kupaliskabratislava_test"
    POSTGRES_PASSWORD: "kupaliskabratislava_test"
    POSTGRES_DB: "kupaliskabratislava_test"
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - .npm/
  before_script:
    - cp $DOTENV_TEST .env.test
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run test

.build:
  stage: build
  tags:
    - docker-socket
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$IMAGE_TAG || true
    - docker build --pull --cache-from $CI_REGISTRY_IMAGE:$IMAGE_TAG --tag $CI_REGISTRY_IMAGE:$IMAGE_TAG -f docker/Dockerfile.$IMAGE_TAG .
    - docker push $CI_REGISTRY_IMAGE:$IMAGE_TAG

.deploy:
  stage: deploy
  tags:
    - elchapo
    - shell
  script:
    - cp docker-compose.yml "$DEPLOY_PATH/docker-compose.yml"
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - docker-compose -p $STACK_NAME --project-directory "$DEPLOY_PATH" pull
    - docker-compose -p $STACK_NAME --project-directory "$DEPLOY_PATH" up -d
    - docker logout $CI_REGISTRY

dev:build:
  needs: [ "test" ]
  extends:
    - .dev
    - .build

dev:deploy:
  needs: [ "dev:build" ]
  extends:
    - .dev
    - .deploy
  before_script:
    - cp $DOTENV_DEV "$DEPLOY_PATH/.env"
  script:
    - cp docker-compose.yml docker-compose.pgpublish.yml "$DEPLOY_PATH"
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - docker-compose -p $STACK_NAME --project-directory "$DEPLOY_PATH" -f docker-compose.yml -f docker-compose.pgpublish.yml pull
    - docker-compose -p $STACK_NAME --project-directory "$DEPLOY_PATH" -f docker-compose.yml -f docker-compose.pgpublish.yml up -d
    - docker logout $CI_REGISTRY

stage:build:
  needs: [ "test" ]
  extends:
    - .stage
    - .build

stage:deploy:
  needs: [ "stage:build" ]
  extends:
    - .stage
    - .deploy
  tags:
    - bratislava
    - shell
    - stage
  before_script:
    - cp $DOTENV_STAGE "$DEPLOY_PATH/.env"

prod:build:
  needs: [ "test" ]
  extends:
    - .prod
    - .build

prod:deploy:
  needs: [ "prod:build" ]
  extends:
    - .prod
    - .deploy
  tags:
    - bratislava
    - shell
    - prod
  before_script:
    - cp $DOTENV_PROD "$DEPLOY_PATH/.env"

dev:analyze:
  stage: test
  needs: [ ]
  tags:
    - elchapo
    - docker
    - general
  image:
    name: sonarsource/sonar-scanner-cli:4.6
    entrypoint: [ "" ]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - .npm/
      - .sonar/cache
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.projectKey=ba-kupaliska-be -Dsonar.sources=./src
  allow_failure: true
  only:
    refs:
      - dev
