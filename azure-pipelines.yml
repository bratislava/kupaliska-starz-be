# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

variables:
  tag: '$(Build.SourceVersion)'
  dockerRepository: bratislava/kupaliska-starz-be/kupaliska-starz-be
resources:
  containers:
  - container: postgres
    image: postgres:13-alpine

stages:
- stage: Test
  variables:
    npm_config_cache: $(Pipeline.Workspace)/.npm
  jobs:
  - job: Test
    pool:
      vmImage: 'ubuntu-18.04'
    container: ubuntu:18.04
    steps:
    - task: DownloadSecureFile@1
      name: EnvFile
      inputs:
        secureFile: '.env.kupaliska.test'
      displayName: Download Env File
    - script: mv $(EnvFile.secureFilePath) $(Build.SourcesDirectory)/.env.test
      displayName: Rename Env File
    - task: Cache@2
      inputs:
        key: 'npm | "$(Agent.OS)" | package-lock.json'
        restoreKeys: |
          npm | "$(Agent.OS)"
        path: $(npm_config_cache)
      displayName: Cache npm
    - task: Npm@1
      displayName: NPM Install
      inputs:
        command: 'ci'
    - task: Npm@1
      displayName: NPM Run Test
      inputs:
        command: 'custom'
        customCommand: 'run test'
    variables:
      POSTGRES_USER: "kupaliskabratislava_test"
      POSTGRES_PASSWORD: "kupaliskabratislava_test"
      POSTGRES_DB: "kupaliskabratislava_test"
    services:
      postgres: postgres

- stage: Build
  displayName: Build image
  condition: and(succeeded(), eq(variables['Build.Reason'], 'IndividualCI'))
  jobs:
  - job: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      displayName: Build and push Dev Image
      inputs:
        containerRegistry: 'Github Packages'
        repository: '$(dockerRepository)'
        command: 'buildAndPush'
        Dockerfile: 'docker/Dockerfile.dev'
        buildContext: '$(Build.SourcesDirectory)'
        tags: '$(tag)-dev'

    - task: Docker@2
      displayName: Build and push Prod Image
      inputs:
        containerRegistry: 'Github Packages'
        repository: '$(dockerRepository)'
        command: 'buildAndPush'
        Dockerfile: 'docker/Dockerfile.prod'
        buildContext: '$(Build.SourcesDirectory)'
        tags: '$(tag)-prod'
    
- stage: Staging
  jobs:
  - deployment: Staging
    environment:
      name: Staging
      resourceType: VirtualMachine
      tags: docker
    variables:
      DEPLOY_PATH: "~/deployments/kupaliska/stage"
      STACK_NAME: "kupaliska_starz_be_stage"
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - download: none
          - task: DownloadSecureFile@1
            name: EnvFile
            inputs:
              secureFile: '.env.kupaliska.staging'
            displayName: Download Env File
          - script: mv $(EnvFile.secureFilePath) $(Build.SourcesDirectory)/.env
            displayName: Rename Env File
          - task: DockerCompose@0
            inputs:
              containerregistrytype: 'Container Registry'
              dockerRegistryEndpoint: 'Github Packages'
              dockerComposeFile: 'docker-compose.yml'
              additionalDockerComposeFiles: 'docker-compose.mglogger.yml'
              projectName: '$(STACK_NAME)'
              action: 'Run services'
              buildImages: false
              dockerComposeFileArgs: |
                IMAGE=docker.pkg.github.com/$(dockerRepository)
                IMAGE_TAG=$(tag)

- stage: Production
  jobs:
  - deployment: Production
    environment:
      name: Production
      resourceType: VirtualMachine
      tags: docker
    variables:
      DEPLOY_PATH: "/home/gitlab-runner/deployments/kupaliska/prod"
      STACK_NAME: "kupaliska_starz_be"
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - download: none
          - task: DownloadSecureFile@1
            name: EnvFile
            inputs:
              secureFile: '.env.kupaliska.production'
            displayName: Download Env File
          - script: mv $(EnvFile.secureFilePath) $(Build.SourcesDirectory)/.env
            displayName: Rename Env File
          - task: DockerCompose@0
            inputs:
              containerregistrytype: 'Container Registry'
              dockerRegistryEndpoint: 'Github Packages'
              dockerComposeFile: 'docker-compose.yml'
              additionalDockerComposeFiles: 'docker-compose.mglogger.yml'
              projectName: '$(STACK_NAME)'
              action: 'Run services'
              buildImages: false
              dockerComposeFileArgs: |
                IMAGE=docker.pkg.github.com/$(dockerRepository)
                IMAGE_TAG=$(tag)
